1) In your own words, explain what clean code is and why it is important.

A: Clean code defines code that is easily readable and maintainable so that
any developer who reads your code is able to understand what you are trying to do.

2) Read this article about Toyota and their use of bad code. Although you may not yet
understand all of the topics discussed, think about another commonly used object
that relies on computers and explain what would happen if the code was not created
to an acceptable standard.

A: Lets take Teslas lane mitigation control/auto pilot for an example. The code
and hardware are extremely important in this case. The code needs to be clean
and maintainable so that all the developers know exactly what is going on
and where issues can arise. If each developer is writing different type of code
compared to the next developer, the time it takes to read the code and understand
it increases as well as debugging the code. This can have affect on hardware as well
because a single mistake or overlook can literally take someones life in the real world.

3) Would you consider the following to be clean code? Explain why or why not. If not,
refactor the code.

FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (x−32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

A: No, the indentation is wrong, the name of the function should be semantic,
the equal sign after first if statement should be == or ===,
the second if statement is wrong because the comment is saying something different.
I added parenthesis in the last if statement so code is easier to read.
Everything else seems fine.

FUNCTION fahrenheightOrCelsius(x, y)               // Creating a new function
  IF y === "F" THEN               // Check if y is equal "F"
    SET z to (x−32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
    PRINT z                       // Print result
  ELSE IF y === "C" THEN          // If y not equal to "F", check if equal to "C"
    SET z to (x * 1.8000 + 32.00)   // Formula to convert degrees celsius to fahrenheit
    PRINT z                       // Print result
 END IF
END FUNCTION

4) Would you consider the following to be clean code? Explain why or why not. If not,
refactor the code.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF


 PRINT percentage
END FUNCTION


A: No, The "not total" if statement is wrong. The 'not' keyword should be right before
the equal that way it will check if total is equal to 0 or not. Presently,
its not clean code. Also, the print statement should be in the if statement, that way
the percentage will print before going to next statement. The new lines are also not
necessary.

FUNCTION calcPercent(sum, total)
 IF total !== 0 THEN
     SET percentage to sum / total * 100
     PRINT percentage
 ELSE
     PRINT "Sorry, cannot divide by 0"
 END IF
END FUNCTION

5a) Using pseudocode, refactor the code for the following examples using the principles
you have learned in this checkpoint.

a. The following function prints the subtotal of a customer's transaction and
receives payment accordingly.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION

A:

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   totalDue = subtotal * discountRate + (subTotal * tax)
   change = amount - subTotal * discountRate + (subTotal * tax)
   PRINT "Your total due is: " + totalDue
   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + change
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + totalDue
   END IF
END FUNCTION

5b) The following function checks out a book if there are no issues with the
guest's account.

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

A:

FUNCTION checkoutBook(book, guest)
  IF guest.accountActive AND NOT(guest.hasOverdueBooks) AND (guest.outstandingFees = 0) THEN
    SET book.status to "Checked Out"
    PRINT "your books have been issued"
  END IF
  ELSE
    PRINT "Unable to check out book"
END FUNCTION

5c) The following class is a code snippet that should support the transactions a
customer can perform at an ATM.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

A:

CLASS BankAccount

 FUNCTION displayBalance(balance)
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer(customer)
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus(customer)
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

6) Square Given an array of integers, find out whether the sum of the integers
is a perfect square. If it is a perfect square, return the square root,
otherwise return the sum.

function square(num){
  return Math.sqrt(num);
}

function squareOrSum(arr){
  sum = 0;
  for (var i = 0; i < arr.length; i++) {
    sum += arr[i];
  }
  if (square(sum) % 1 === 0){
    return square(sum);
  }
  else {
    return sum;
  }
}

7)  Duplicate Given an array of integers, find out whether the array contains
any duplicate elements. The function should return true if any value appears at
least twice in the array, and false if every element is distinct.

function isDuplicate(arr){
  var result = [];
  for(var i = 0; i < arr.length; i++){
    if (result[arr[i]] === undefined){
        result[arr[i]] = 1;
    }
    else {
        return true;
    }
  }
  return false;
}
8. Anagram An anagram is a word, phrase, or name formed by rearranging the letters
of another word. For example, spar can be formed from rasp. Given two strings,
stringOne and stringTwo, determine if stringOne is an anagram of stringTwo.
Assume that the strings contain only lowercase letters and do not worry about
case-sensitivity. Hint: Your first task will be to convert the strings to arrays.

function anagram(stringOne, stringTwo){
  stringOneArr = stringOne.split("").sort().join('')
  stringTwoArr = stringTwo.split("").sort().join('')
  return stringOneArr === stringTwoArr;
}
