1) What is time complexity and what is its relation to algorithms?

A: Time complexity is the amount of time it takes for an function to run
depending on input size. Its directly related to algorithms because algorithms, when run,
take certain amount of time during their execution.

2) What is runtime?

A: Runtime is physical time duration of an algorithm

3) How is the runtime of an algorithm calculated?

A: Run Time of an algorithm is calculated depending on its input size.

4) Name the six types of algorithm growth rates we saw in this checkpoint and
list them in order of most efficient to least efficient. Now Google another
algorithmic growth rate not covered and place it in the correct spot in your list.

A: O(1), O(log n), O(n), O(n log n ), O(n2), O(2^n), O(n^n)

5) Choose one of the algorithmic growth rates from the last question and make a
comparison to a real-life situation.

A: O(n)- Each quarter, University of Davis gets certain amount of applicants.
The board member has to go through each application and process accordingly.

6) Determine the time complexity of the following snippet of code. It is commonly
known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

A: O(n)

7) Determine the time complexity of the following snippet of code.

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

A: O(n^2)

8) Determine the time complexity of the following snippet of code. It is commonly
known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

A: O(2^n)

9) Out of the code snippets you just saw, which is the most time efficient?

A: Most time efficient is the first algorithm linear search O(n).
